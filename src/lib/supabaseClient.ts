import { createBrowserClient } from '@supabase/supabase-js';
import type { Database } from './database.types'; // Assuming database.types.ts will be generated by Supabase CLI

// Note: The Database type definition (database.types.ts) is typically generated
// from your Supabase schema using the Supabase CLI:
// `supabase gen types typescript --project-id YOUR_PROJECT_ID > src/lib/database.types.ts`
// For this setup, we'll proceed without it and use `any` or define a minimal Database interface if needed.
// For now, we let it be Database from a potentially non-existent file to show intent.
// If it causes build issues, we can simplify it to use <any>.

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Supabase URL and/or Anon Key are missing from environment variables.');
}

// Using createBrowserClient for broad compatibility, can be replaced with createServerClient for server-only use.
// For this app, since there's no user-specific RLS and mutations are handled by Server Actions,
// this client can be used on server-side too by Server Actions.
export const supabase = createBrowserClient<Database>(supabaseUrl, supabaseAnonKey);

// Minimal Database type if database.types.ts is not available
// export interface Database {
//   public: {
//     Tables: {
//       employees: {
//         Row: any;
//         Insert: any;
//         Update: any;
//       };
//       // Add other tables here
//     };
//     Functions: any;
//     Enums: any;
//   };
// }
